# # FROM node:lts-alpine

# # WORKDIR /src

# # EXPOSE 3000

# # RUN apk update \
# #     && apk upgrade \
# #     && apk add --no-cache --upgrade bash


# # pick image with git and bash
# # ARG BASE=mcr.microsoft.com/vscode/devcontainers/javascript-node:0-16-bullseye
# # ARG BASE=node:16-bullseye
# ARG BASE=node:latest

# # no ENV vars required buildtime

# #---------------------

# FROM ${BASE} AS dependencies
# WORKDIR /Volumes/docker/boilerplate-testing/nextjs-prisma-boilerplate_dev
# # WORKDIR /app
# ENV NODE_ENV development

# COPY package.json yarn.lock ./
# COPY prisma ./prisma

# RUN yarn install
# RUN npx prisma generate
# RUN rm -rf prisma

# # don't copy source, mount it via volume

# # volumes folders must be created and chowned before docker-compose creates them as root
# # create them during docker build
# RUN mkdir -p .next
# RUN chown node:node . node_modules .next
# RUN chown -R node:node node_modules/.prisma

# USER node

# # debug
# RUN ls -la node_modules/.prisma/client

# EXPOSE 42069
# ENV PORT 42069

# CMD [ "yarn", "cmd:start:dev" ]



# https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile
# https://github.dev/russpalms

# ARG BASE=node:16-alpine
# ARG BASE=node:16.13.1-alpine
ARG BASE=node:latest

#------ target dependencies

# Install dependencies only when needed
FROM ${BASE} AS dependencies

RUN apk update \
	&& apk add --no-cache openssl curl libc6-compat \
	&& rm -rf /var/lib/apt/lists/* \
	&& rm -rf /var/cache/apk/*

RUN openssl version && curl --version
RUN curl -sf https://gobinaries.com/tj/node-prune | sh

WORKDIR /app
COPY package.json yarn.lock ./
COPY prisma ./prisma

RUN yarn install --production=true --frozen-lockfile --ignore-scripts \
    && npx prisma generate \
    && node-prune \
    && cp -R node_modules prod_node_modules \
    && yarn install --production=false --prefer-offline \
    && npx prisma generate \
    && rm -rf prisma \
    && yarn cache clean
    
#------ target bulider

# Rebuild the source code only when needed
FROM ${BASE} AS builder
WORKDIR /app

COPY . .
COPY --from=dependencies /app/node_modules ./node_modules

# only for SSG pages
ARG ARG_DATABASE_URL
ENV DATABASE_URL=$ARG_DATABASE_URL

# NEXTAUTH_URL required at build time for CustomHead SEO
ARG ARG_NEXTAUTH_URL
ENV NEXTAUTH_URL=$ARG_NEXTAUTH_URL

# debug
RUN echo "DATABASE_URL=$DATABASE_URL"
RUN echo "NEXTAUTH_URL=$NEXTAUTH_URL"

# ENV DEBUG=*

# npx prisma migrate deploy && npx prisma db seed - not needed
# connect to existing db with data
# build reads DATABASE_URL env, and needs dev dependencies
RUN yarn build && rm -rf node_modules

#------ target production

# Production image, copy all the files and run next
FROM ${BASE} AS production
WORKDIR /app

ENV NODE_ENV production

COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json
COPY --from=dependencies /app/prod_node_modules ./node_modules
COPY --from=builder --chown=node:node /app/dist ./dist
COPY --from=builder --chown=node:node /app/.next ./.next
# use schema from container
COPY --from=builder --chown=node:node /app/prisma ./prisma

# volumes
COPY --from=builder --chown=node:node /app/uploads ./uploads

# in command in d-c.yml
RUN chmod 766 -R uploads

USER node

EXPOSE 42069
ENV PORT 42069

ENV NEXT_TELEMETRY_DISABLED 1

# run migrate and seed here
CMD ["yarn", "cmd:start:prod"]
