// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL") // Ensure this environment variable points to your MongoDB instance
  //   directUrl = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
//   direct
  idDirect                  String?                   @default(uuid())
  clerkId                   String?                   @unique
  subscription              Subscription?
  integrations              Integrations[]
  automations               Automation[]
  avatarUrl                 String?
  name                      String?
  email                     String?                   @unique
  emailVerified             DateTime?
  image                     String?
  
  // Custom fields
  password                  String?
  firstname                 String?
  lastname                  String?
  rRole                      String?
  stripeId                  String?
  customerId                String?
  username                  String?
  modifyId                  String?
  registeredInfo            Json?
  shipping                  Json?
  neccessary_actions        Json?
  personal_info             Json?
  verification              Json?
  company_verification      Json?
  individual_verification   Json?
  stripe_metadata           Json?
  stripeBalance             Json?
  external_accounts         Json?
  
  accounts                  Account[]
  sessions                  Session[]
  Authenticators            Authenticator[]

  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt

  availableLanguages        String[]                  @default(["en"])
  hasSelectedSecondLanguage Boolean                   @default(false)
  lastUpdated               DateTime                  @default(now())

  memberships               Membership[]

  role                    Role                      @default(SUBACCOUNT_USER)
  agencyId                  String?                   @db.ObjectId
  Agency                    Agency?                   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions               Permissions[]
  Ticket                    Ticket[]
  Notification              Notification[]

  // school
  comments   Comment[]
  group      Group[]
  likes      Like[]
  membership Members[]
  message    Message[]
  posts      Post[]

  // spread
  type      String

  domains Domain[]

  campaign Campaign[]

  spSubscription Billings?

  // direct

  @@index([agencyId])
}

model Agency {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  connectAccountId          String?                   @default("")
  customerId                String                    @default("")
  name                      String
  agencyLogo                String
  companyEmail              String
  companyPhone              String
  whiteLabel                Boolean                   @default(true)
  address                   String
  city                      String
  zipCode                   String
  state                     String
  country                   String
  goal                      Int                       @default(5)
  users                     User[]
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  SubAccount                SubAccount[]
  SidebarOption             AgencySidebarOption[]
  Invitation                Invitation[]
  Notification              Notification[]
  Subscription              Subscription?
  AddOns                    AddOns[]
}

model Permissions {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  email                     String
  User                      User                      @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId              String                    @db.ObjectId
  SubAccount                SubAccount                @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access                    Boolean

  @@index([subAccountId])
  @@index([email])
}

model SubAccount {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  connectAccountId          String?                   @default("")
  name                      String
  subAccountLogo            String
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  companyEmail              String
  companyPhone              String
  goal                      Int                       @default(5)
  address                   String
  city                      String
  zipCode                   String
  state                     String
  country                   String
  subAccountId  String?                   @db.ObjectId // Make sure this field exists
  agencyId      String?                   @db.ObjectId // Ensure agencyId is also defined  Agency                    Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SidebarOption             SubAccountSidebarOption[]
  Permissions               Permissions[]
  Funnels                   Funnel[]
  Media                     Media[]
  Contact                   Contact[]
  Trigger                   Trigger[]
  Automation                Automation[]
  Pipeline                  Pipeline[]
  Tags                      Tag[]
  Notification              Notification[]
  tickets                   TicketSubAccount[]        // Explicit relation table
  Agency        Agency?    @relation(fields: [agencyId], references: [id], onDelete: Cascade) // Add this line for the relation

  @@index([subAccountId]) // This will now work if subAccountId is defined
  @@index([agencyId])      // This will work if agencyId is defined
}

model TicketSubAccount {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // Single ID field
  subAccountId String   @db.ObjectId
  ticketId   String   @db.ObjectId

  SubAccount SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket     Ticket     @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  // No composite primary key
}

model AgencySidebarOption {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                      String                    @default("Menu")
  link                      String                    @default("#")
  icon                      Icon                      @default(info)
  agencyId                  String                    @db.ObjectId
  Agency                    Agency?                   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt

  @@index([agencyId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  email                     String                    @unique
  agencyId                  String                    @db.ObjectId
  Agency                    Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status                    InvitationStatus          @default(PENDING)
  role                      Role                      @default(SUBACCOUNT_USER)

  @@index([agencyId])
}

model Notification {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  notification              String
  agencyId                  String                    @db.ObjectId
  subAccountId              String?                   @db.ObjectId
  userId                    String                    @db.ObjectId

  User                      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency                    Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount                SubAccount?               @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

model AddOns {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  name                      String
  active                    Boolean                   @default(false)
  priceId                   String                    @unique
  agencyId                  String?                   @db.ObjectId
  Agency                    Agency?                   @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                      String                    @default("Menu")
  link                      String                    @default("#")
  icon                      Icon                      @default(info)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  SubAccount                SubAccount?               @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId              String?                   @db.ObjectId

  @@index([subAccountId])
}

model Funnel {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  description               String?
  published                 Boolean                   @default(false)
  subDomainName             String?                   @unique
  favicon                   String?
  subAccountId              String                    @db.ObjectId
  SubAccount                SubAccount                @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  FunnelPages               FunnelPage[]
  liveProducts              String?                   @default("[]")
  ClassName                 ClassName[]

  @@index([subAccountId])
}

model Media {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  type                      String?
  name                      String
  link                      String                    @unique
  subAccountId              String                    @db.ObjectId
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  Subaccount                SubAccount                @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Contact {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  email                     String
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  subAccountId              String                    @db.ObjectId

  Subaccount                SubAccount                @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket                    Ticket[]

  @@index([subAccountId])
}

model Pipeline {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  Lane                      Lane[]
  SubAccount                SubAccount                @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId              String                    @db.ObjectId

  @@index([subAccountId])
}

model Tag {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  color                     String
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  subAccountId              String                    @db.ObjectId

  SubAccount                SubAccount                @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
//   Ticket                    Ticket[]
  ticketTags       TicketTag[]            // Explicit relation table for many-to-many with Ticket

  @@index([subAccountId])
}

model TicketTag {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // Single ID field
  ticketId   String   @db.ObjectId
  tagId      String   @db.ObjectId

  Ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  Tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  // No composite primary key
}

model FunnelPage {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?
  order        Int
  previewImage String?
  funnelId    String   @db.ObjectId // Add @db.ObjectId to match Funnel.id
  Funnel      Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model ClassName {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId    String   @db.ObjectId // Add @db.ObjectId to match Funnel.id
  customData String?
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model Ticket {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String   @db.ObjectId // Add @db.ObjectId to match Lane.id
  order       Int      @default(0)
  value       Float?   // Changed from Decimal? to Float?
  description String?
//   Tags        Tag[]
  ticketTags       TicketTag[]            // Explicit relation table for many-to-many with Tag

  Lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  ticketSubAccounts TicketSubAccount[]    // Add this line for the relation

  customerId String?   @db.ObjectId
  Customer   Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  assignedUserId String?    @db.ObjectId
  Assigned       User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model Lane {
  id                        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String @db.ObjectId
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

model Document {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  // ...
  memberships Membership[]
}

model Membership {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  role      String
  createdAt DateTime  @default(now())
  // Foreign keys
  userId    String    @db.ObjectId
  docId     String    @db.ObjectId
  
  // Relations
  user      User      @relation(fields: [userId], references: [id])
  document  Document  @relation(fields: [docId], references: [id])
}

model Subscription {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique @db.ObjectId
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
//   exotalk
  /**
   * Using Json for metadata (key/value) and items (array of Stripe items).
   * If you'd rather have a separate table for items, change accordingly.
   */
  metadata           Json?
  stripeLink         String
  quantity           Int
  items             Json       // storing Stripe.SubscriptionItem[] as JSON

  // Single "primary" Price reference
  priceId            String    @db.ObjectId
  price              Price     @relation(fields: [priceId], references: [id])

  // Single "primary" Product reference
  productId          String    @db.ObjectId
  product            Product   @relation(fields: [productId], references: [id])

  /**
   * If you want multiple Price references, you can store them as JSON as well
   * or create a separate join table. Here's a JSON approach for simplicity:
   */
  priceIds           Json      // an array of string IDs

  paymentMethod      String?
  latestInvoice      String?

  // Subscription status
  status             String

  // Cancels
  cancelAtPeriodEnd  Boolean   @default(false)

  // Dates
  created            DateTime  @default(now())
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  endedAt            DateTime?
  cancelAt           DateTime?
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?

  // For auditing or linking to a User if needed
  // userId           String?
  // user             User?       @relation(fields: [userId], references: [id])

//    nexusconjure
  active    Boolean  @default(false)
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique
  Agency     Agency?    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  agencyId   String?    @unique @db.ObjectId
  ncPlan      Plan?

  // school
  scPrice     Int?
  groupId   String?  @db.ObjectId
  Group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  // direct
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

model ChatMember {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId     String   @db.ObjectId
  userId     String   @db.ObjectId
  email      String
  timestamp  DateTime?
  isAdmin    Boolean  @default(false)
  image      String?
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)


  // If you have more columns (e.g. role, createdAt, updatedAt), add them here.
}

model Customer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique
  stripeId   String
  stripeLink String

  // spread
  email String? 

  questions CustomerResponses[]

  chatRoom ChatRoom[]

  booking Bookings[]

  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.ObjectId // This should match Domain.id
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId     String   @db.ObjectId  // Add ObjectId type to match Chat.id
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  input      String
  timestamp  DateTime @default(now())
  
  // Store `user` inline as JSON or create a separate relation if you prefer
  user       Json

  // Store the translations as JSON
  translated Json?

  // school
  message    String
  createdAt  DateTime @default(now())
  senderid   String?  @db.ObjectId // Change to @db.ObjectId to match User.id
  recieverId String?  @db.ObjectId // Change to @db.ObjectId if needed
  sender     User?    @relation(fields: [senderid], references: [id], onDelete: Cascade)
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  // etc...
  messages  Message[]
  members   ChatMember[]
  memberCount Int          @default(0)
  maxMembers  Int          @default(3)
}



model Integrations {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        INTEGRATIONS @default(INSTAGRAM)
  createdAt   DateTime     @default(now())
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?      @db.ObjectId  // Changed to ObjectId for MongoDB
  token       String       @unique
  expiresAt   DateTime?
  instagramId String?      @unique
}

enum INTEGRATIONS {
  INSTAGRAM
}

model Automation {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  createdAt         DateTime            @default(now())
  active            Boolean             @default(false)
  instances         AutomationInstance[] // Add this line for the relation
  actions     Action[]   // Add this line for the relation
  trigger   Trigger[]
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.ObjectId  // Changed from @db.Uuid to @db.ObjectId
  keywords  Keyword[]
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String?     @db.ObjectId
}

model Trigger {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.ObjectId
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String?     @db.ObjectId
}

model Listener {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.ObjectId
  prompt       String
  commentReply String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
  listener     LISTENERS  @default(MESSAGE)
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}

model Post {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.ObjectId

  // school
  createdAt   DateTime  @default(now())
  title       String?
  htmlContent String?
  jsonContent String?
  content     String
  authorId    String    @db.ObjectId
  channelId   String    @db.ObjectId
  comments    Comment[]
  likes       Like[]
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  channel     Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

model Dms {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     @db.ObjectId
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Keyword {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.ObjectId

  @@unique([automationId, word]) //this constraints ensure user cant use the same keyword on multiple automations
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Product {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  // Add any other fields as needed

  // Relation back to Subscriptions
  subscriptions Subscription[]

  // poke
  type        String
  description String
  printfulId  Int       @unique
  variants    Variant[] @relation("ProductVariants")

  // spread
  price     Int
  image     String
  Domain    Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId  String?  @db.ObjectId
}

model Price {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  nickname    String?
  unitAmount  Int?
  currency    String
  interval    String          // e.g. "month", "year", etc.
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  // Add any other fields as needed

  // Relation back to Subscriptions
  subscriptions Subscription[]
}

model Action {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  order       Int
  automationId String     @db.ObjectId
  Automation  Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId      String     @default("0")  
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model AutomationInstance {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String     @db.ObjectId
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

enum Plan {
  price_1Oh5X0GPaa0QUDfnATA57adG
  price_1Oh5sNGPaa0QUDfnTLSaIYFR
}

// boil
// model Post {
//   id          Int     @id @default(autoincrement())
//   title       String
//   content     String
//   published   Boolean @default(false)
//   authorId    String
//   author      User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   createdAt   DateTime  @default(now()) @map(name: "created_at")
//   updatedAt   DateTime  @updatedAt @map(name: "updated_at")
//   // hero image, tag, category, comments, likes

//   @@map("posts")
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String
//   email         String    @unique // optional, facebook
//   username      String    @unique @default(cuid())
//   provider      String    @default("credentials")
//   password      String? 
//   emailVerified DateTime? @map("email_verified")
//   image         String?
//   headerImage   String?   @map("header_image")
//   bio           String?
//   role          String    @default("user") // user, admin
//   accounts      Account[] // next-auth requires this schema, user is in schema too
//   sessions      Session[]
//   posts         Post[]
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @updatedAt @map(name: "updated_at")

//   @@map("users")
// }

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String  @map("user_id")
//   user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   expires      DateTime  
//   userId       String   @map("user_id")
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model VerificationToken {  
//   identifier String  
//   token      String   @unique  
//   expires    DateTime

//   @@unique([identifier, token])  
//   @@map("verificationtokens")
// }


//nexusconjure

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
  user
  assistant
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

//poke
model Variant {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  size          String
  color         String
  printfulPrice Float
  retailPrice   Float
  printfulId    Int      @unique
  productId     String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  stripePriceId String?  @unique
  mockupUrl     String?
  orders        Order[]  @relation("VariantToOrder")
  product       Product  @relation("ProductVariants", fields: [productId], references:    [id])
  mockupImages   String[] @default([])
  printfulFileId Int
}

model Order {
  id              String   @id @default(cuid()) @map("_id") // Add @map("_id") for MongoDB
  variantId       String   @db.ObjectId
  stripeSessionId String   @unique
  status          String
  shippingDetails Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  variant         Variant  @relation("VariantToOrder", fields: [variantId], references: [id])
}

model UserUpload {
  id              String   @id @default(cuid()) @map("_id") // Add @map("_id") for MongoDB
  userId    String
  imageUrl  String
  createdAt DateTime @default(now())
}

model QuizResult {
  id              String   @id @default(cuid()) @map("_id") // Add @map("_id") for MongoDB
  createdAt              DateTime                 @default(now())
  trainerName            String?
  grassPokemon           Json
  firePokemon            Json
  waterPokemon           Json
  teamSummary            String
  audioStatus            String                   @default("pending")
  rankings               Json?
  base64ImageMap         Json                     @default("{}")
  svgMap                 Json?
  audioData              Bytes?
  pokemonResultPngs      Json?
  PixelatedPokemonResult PixelatedPokemonResult[]
}

model HatProduct {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId for MongoDB
  printfulId     Int
  mainCategoryId Int
  type           String
  description    String
  title          String
  brand          String
  model          String
  image          String
  variantCount   Int
  currency       String
  origin_country String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  files          File[]
  hatVariants    HatVariant[]
  options        Option[]
  techniques     Technique[]
}

model HatVariant {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId for MongoDB
  printfulFileId  Int
  name            String
  color           String
  size            String
  image           String
  retailPrice     Float
  currency        String
  stripePriceId   String
  hatProductId    String     @db.ObjectId
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  selectedOptions Json
  hatProduct      HatProduct @relation(fields: [hatProductId], references: [id])
}

model Option {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId for MongoDB
  title                      String
  type                       OptionType
  values                     Json?
  additional_price           Float?
  additional_price_breakdown Json
  hatProductId               String     @db.ObjectId
  hatProduct                 HatProduct @relation(fields: [hatProductId], references: [id])
}

model Technique {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId for MongoDB
  display_name String
  is_default   Boolean
  hatProductId String     @db.ObjectId
  hatProduct   HatProduct @relation(fields: [hatProductId], references: [id])
}

model File {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId for MongoDB
  type             FileType
  title            String
  additional_price Float?
  hatProductId     String       @db.ObjectId
  hatProduct       HatProduct   @relation(fields: [hatProductId], references: [id])
  options          FileOption[]
}

model FileOption {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId for MongoDB
  type             FileOptionType
  title            String
  additional_price Float
  fileId           String         @db.ObjectId
  file             File           @relation(fields: [fileId], references: [id])
}

model Image {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId for MongoDB
  data      Bytes
  mimeType  String
  filename  String
  createdAt DateTime @default(now())
}

model AccessCode {
  id              String   @id @default(cuid()) @map("_id") // Add @map("_id") for MongoDB
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  accessToken  String   @map("access_token")
  expiresAt    Int      @map("expires_at")
  refreshToken String   @map("refresh_token")
}

model PixelatedPokemonResult {
  id                 String     @id @map("_id") // Add @map("_id") for MongoDB
  quizResultId       String
  pokemonName        String
  finalPng           String
  pixelationSettings Json
  createdAt          DateTime   @default(now())
  QuizResult         QuizResult @relation(fields: [quizResultId], references: [id])

  @@index([quizResultId, pokemonName])
}

enum OptionType {
  radio
  multi_select
  text
}

enum FileType {
  embroidery_front_large
  embroidery_front
  embroidery_back
  embroidery_right
  embroidery_left
  mockup
}

enum FileOptionType {
  bool
}



//school
model Group {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  name            String         @unique
  category        String
  thumbnail       String?
  description     String?
  gallery         String[]
  jsonDescription String?
  htmlDescription String?
  icon            String?
  privacy         GROUP_PRIVACY  @default(PRIVATE)
  active          Boolean        @default(false)
  createdAt       DateTime       @default(now())
  userId          String         @db.ObjectId // Change to @db.ObjectId to match User.id
  domain          String?
  affiliate       Affiliate?
  channel         Channel[]
  courses         Course[]
  User            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  member          Members[]
  subscription    Subscription[]
}

model Members {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  userId    String?  @db.ObjectId // Change to @db.ObjectId to match MongoDB standards
  groupId   String?  @db.ObjectId // Change to @db.ObjectId to match MongoDB standards
  createdAt DateTime @default(now())
  Group     Group?   @relation(fields: [groupId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId, groupId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  createdAt DateTime @default(now())
  postId    String   @db.ObjectId // Change to @db.ObjectId to match MongoDB standards
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  createdAt DateTime  @default(now())
  content   String
  postId    String    @db.ObjectId
  userId    String    @db.ObjectId
  replied   Boolean?  @default(false)
  commentId String?   @db.ObjectId
  Comment   Comment?   @relation("CommentToComment", fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Set onDelete and onUpdate to NoAction
  reply     Comment[] @relation("CommentToComment")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Channel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  name      String
  icon      String
  createdAt DateTime @default(now())
  groupId   String?  @db.ObjectId
  Group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  posts     Post[]
}

model Course {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  name        String
  thumbnail   String
  published   Boolean  @default(false)
  privacy     String
  description String
  createdAt   DateTime @default(now())
  groupId     String?  @db.ObjectId
  Group       Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  modules     Module[]
}

model Module {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")

  courseId  String?   @db.ObjectId
  title     String
  createdAt DateTime  @default(now())
  Course    Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  section   Section[]
}

model Section {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")

  name        String   @default("New Section")
  icon        String   @default("doc")
  complete    Boolean  @default(false)
  createdAt   DateTime @default(now())
  moduleId    String?  @db.ObjectId
  content     String?
  htmlContent String?
  JsonContent String?
  Module      Module?  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Affiliate {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  groupId   String?  @unique @db.ObjectId
  createdAt DateTime @default(now())
  Group     Group?   @relation(fields: [groupId], references: [id])
}

enum GROUP_PRIVACY {
  PUBLIC
  PRIVATE
}



//spread
model Domain {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")

  name String
  icon String

  chatBot         ChatBot?
  helpdesk        HelpDesk[]
  filterQuestions FilterQuestions[]
  products        Product[]

  customer   Customer[]
  User       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?    @db.ObjectId
  Campaign   Campaign?  @relation(fields: [campaignId], references: [id])
  campaignId String?    @db.ObjectId
}

model ChatBot {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")

  welcomeMessage String?
  icon           String?
  background     String?
  textColor      String?
  helpdesk       Boolean @default(false)
  Domain         Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId       String? @unique @db.ObjectId
}

model Billings {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")

  plan    Plans   @default(STANDARD)
  credits Int     @default(10)
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String? @unique @db.ObjectId
}

model HelpDesk {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")

  question String
  answer   String

  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.ObjectId
}

model FilterQuestions {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")

  question String
  answered String?

  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @db.ObjectId
}

model CustomerResponses {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")

  question   String
  answered   String?
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @db.ObjectId
}

model ChatRoom {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  live       Boolean   @default(false)
  mailed     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?   @db.ObjectId

  message ChatMessage[]
}

model ChatMessage {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  message    String
  role       Role?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String?   @db.ObjectId
  seen       Boolean   @default(false)
}

model Bookings {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  date       DateTime
  slot       String
  email      String
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?   @db.ObjectId
  domainId   String?   @db.ObjectId
  createdAt  DateTime  @default(now())
}

model Campaign {
  id   String @id @default(auto()) @map("_id") @db.ObjectId // Change to @db.ObjectId and add @map("_id")
  name      String
  customers String[]
  domain    Domain[]
  template  String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
}

enum Plans {
  STANDARD
  PRO
  ULTIMATE
}