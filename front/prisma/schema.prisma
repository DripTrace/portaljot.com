// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL") // Ensure this environment variable points to your MongoDB instance
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String           @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?          @unique
  emailVerified           DateTime?
  image                   String?
  
  // Custom fields
  password                String?
  firstname               String?
  lastname                String?
  role                    String?
  stripeId                String?
  customerId              String?
  username                String?
  modifyId                String?
  registeredInfo          Json?
  shipping                Json?
  neccessary_actions      Json?
  personal_info           Json?
  verification            Json?
  company_verification    Json?
  individual_verification Json?
  stripe_metadata         Json?
  stripeBalance           Json?
  external_accounts       Json?
  
  accounts                Account[]
  sessions                Session[]
  Authenticators          Authenticator[]

  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
