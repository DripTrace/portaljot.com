datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  // NextAuth fields
  id                    String          @id @default(cuid())
  name                  String?
  email                 String          @unique @db.VarChar(100)
  emailVerified        DateTime?
  image                String?
  nextAuthAccounts     Account[]       @relation("NextAuthAccounts")
  nextAuthSessions     Session[]       @relation("NextAuthSessions")
  authenticators       Authenticator[]
  
  // Django fields
  password             String          @db.VarChar(128)
  last_login          DateTime?       @db.Timestamptz(6)
  userId              String          @unique @db.VarChar(64)
  username            String          @unique @db.VarChar(64)
  active              Boolean
  is_staff            Boolean
  is_superuser        Boolean
  created_on          DateTime?       @db.Timestamptz(6)
  updated_at          DateTime        @db.Timestamptz(6)

  // Django Relations
  account_emailaddress account_emailaddress[]
  authtoken_token authtoken_token?
  django_admin_log django_admin_log[]
  portaljotauth_customusermodel_groups portaljotauth_customusermodel_groups[]
  portaljotauth_customusermodel_user_permissions portaljotauth_customusermodel_user_permissions[]
  socialaccount_socialaccount socialaccount_socialaccount[]
  waitlists_waitlistentry waitlists_waitlistentry[]

  @@index([email])
  @@index([username])
  @@index([userId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation("NextAuthAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("NextAuthSessions", fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model account_emailaddress {
  id                    Int                         @id @default(autoincrement())
  email                 String                      @db.VarChar(254)
  verified              Boolean
  primary               Boolean
  user_id              String                      @db.VarChar(64)
  user                  User                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  account_emailconfirmation account_emailconfirmation[]

  @@unique([user_id, email])
  @@index([email])
}

model account_emailconfirmation {
  id              Int                @id @default(autoincrement())
  created         DateTime           @db.Timestamptz(6)
  sent            DateTime?          @db.Timestamptz(6)
  key             String            @unique @db.VarChar(64)
  email_address_id Int
  account_emailaddress account_emailaddress @relation(fields: [email_address_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([email_address_id])
  @@index([key])
}

model auth_group {
  id                    Int     @id @default(autoincrement())
  name                  String  @unique @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  portaljotauth_customusermodel_groups portaljotauth_customusermodel_groups[]

  @@index([name])
}

model auth_group_permissions {
  id            BigInt   @id @default(autoincrement())
  group_id      Int
  permission_id Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auth_group    auth_group    @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([group_id, permission_id])
  @@index([group_id])
  @@index([permission_id])
}

model auth_permission {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  content_type_id Int
  codename        String    @db.VarChar(100)
  auth_group_permissions auth_group_permissions[]
  django_content_type django_content_type @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  portaljotauth_customusermodel_user_permissions portaljotauth_customusermodel_user_permissions[]

  @@unique([content_type_id, codename])
  @@index([content_type_id])
}

model authtoken_token {
  key         String   @id @db.VarChar(40)
  created     DateTime @db.Timestamptz(6)
  user_id     String   @unique @db.VarChar(64)
  user        User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([key])
}

model django_admin_log {
  id              Int       @id @default(autoincrement())
  action_time     DateTime  @db.Timestamptz(6)
  object_id       String?
  object_repr     String    @db.VarChar(200)
  action_flag     Int       @db.SmallInt
  change_message  String
  content_type_id Int?
  user_id         String    @db.VarChar(64)
  content_type    django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([content_type_id])
  @@index([user_id])
}

model django_content_type {
  id              Int       @id @default(autoincrement())
  app_label       String    @db.VarChar(100)
  model           String    @db.VarChar(100)
  auth_permission auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model])
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)
}

model django_session {
  session_key    String    @id @db.VarChar(40)
  session_data   String
  expire_date    DateTime  @db.Timestamptz(6)

  @@index([expire_date])
  @@index([session_key])
}

model django_site {
  id                              Int     @id @default(autoincrement())
  domain                          String  @unique @db.VarChar(100)
  name                            String  @db.VarChar(50)
  socialaccount_socialapp_sites   socialaccount_socialapp_sites[]

  @@index([domain])
}

model portaljotauth_customusermodel_groups {
  id                  BigInt  @id @default(autoincrement())
  customusermodel_id  String  @db.VarChar(64)
  group_id           Int
  auth_group         auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user               User      @relation(fields: [customusermodel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([customusermodel_id, group_id])
  @@index([customusermodel_id])
  @@index([group_id])
}

model portaljotauth_customusermodel_user_permissions {
  id                  BigInt  @id @default(autoincrement())
  customusermodel_id  String  @db.VarChar(64)
  permission_id      Int
  auth_permission    auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user               User           @relation(fields: [customusermodel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([customusermodel_id, permission_id])
  @@index([customusermodel_id])
  @@index([permission_id])
}

model socialaccount_socialaccount {
  id           Int       @id @default(autoincrement())
  provider     String    @db.VarChar(200)
  uid          String    @db.VarChar(191)
  last_login   DateTime  @db.Timestamptz(6)
  date_joined  DateTime  @db.Timestamptz(6)
  extra_data   Json
  user_id      String    @db.VarChar(64)
  user         User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tokens       socialaccount_socialtoken[]

  @@unique([provider, uid])
  @@index([user_id])
}

model socialaccount_socialapp {
  id              Int     @id @default(autoincrement())
  provider        String  @db.VarChar(30)
  name            String  @db.VarChar(40)
  client_id       String  @db.VarChar(191)
  secret          String  @db.VarChar(191)
  key             String  @db.VarChar(191)
  provider_id     String  @db.VarChar(200)
  settings        Json
  sites          socialaccount_socialapp_sites[]
  tokens         socialaccount_socialtoken[]
}

model socialaccount_socialapp_sites {
  id            BigInt  @id @default(autoincrement())
  socialapp_id  Int
  site_id       Int
  django_site   django_site @relation(fields: [site_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  socialapp     socialaccount_socialapp @relation(fields: [socialapp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([socialapp_id, site_id])
  @@index([site_id])
  @@index([socialapp_id])
}

model socialaccount_socialtoken {
  id            Int       @id @default(autoincrement())
  token         String
  token_secret  String
  expires_at    DateTime? @db.Timestamptz(6)
  account_id    Int
  app_id        Int?
  account       socialaccount_socialaccount @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  app           socialaccount_socialapp?    @relation(fields: [app_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([app_id, account_id])
  @@index([account_id])
  @@index([app_id])
}

model waitlists_waitlistentry {
  id          BigInt    @id @default(autoincrement())
  email       String    @db.VarChar(254)
  description String?
  updated     DateTime  @db.Timestamptz(6)
  timestamp   DateTime  @db.Timestamptz(6)
  user_id     String?   @db.VarChar(64)
  user        User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id])
}
